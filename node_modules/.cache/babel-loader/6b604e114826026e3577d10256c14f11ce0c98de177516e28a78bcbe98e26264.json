{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nexport const login = createAsyncThunk(\"auth/login\", async payload => {\n  const {\n    username,\n    password\n  } = payload;\n  try {\n    const response = await axios.post(\"/login\", {\n      username,\n      password\n    });\n    localStorage.setItem(\"token\", response.data.token);\n    return response.data;\n  } catch (error) {\n    throw error.response.data.error;\n  }\n});\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    token: \"\",\n    user: {},\n    isAuthenticated: false,\n    isLoading: false,\n    error: null\n  },\n  reducers: {\n    loginRequest: state => {\n      state.isLoading = true;\n    },\n    loginSuccess: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.token = payload.token;\n      state.user = payload.user;\n      state.isAuthenticated = true;\n      state.isLoading = false;\n    },\n    loginFailure: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.error = payload;\n      state.isLoading = false;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(login.pending, state => {\n      state.isLoading = true;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.token = action.payload.token;\n      state.user = action.payload.user;\n      state.isAuthenticated = true;\n      state.isLoading = false;\n    }).addCase(login.rejected, (state, action) => {\n      state.error = action.payload;\n      state.isLoading = false;\n    });\n  }\n});\nexport const selectAuth = state => state.auth;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","login","payload","username","password","response","post","localStorage","setItem","data","token","error","authSlice","name","initialState","user","isAuthenticated","isLoading","reducers","loginRequest","state","loginSuccess","loginFailure","extraReducers","builder","addCase","pending","fulfilled","action","rejected","selectAuth","auth","reducer"],"sources":["/Users/hb/Desktop/Projects/gossip_frontend/src/store/authSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nexport const login = createAsyncThunk(\"auth/login\", async (payload) => {\n    const {username, password} = payload;\n    try {\n        const response = await axios.post(\"/login\", { username, password });\n        localStorage.setItem(\"token\", response.data.token);\n        return response.data;\n    } catch (error) {\n        throw error.response.data.error;\n    }\n});\n\nconst authSlice = createSlice({\n    name: \"auth\",\n    initialState: {\n        token: \"\",\n        user: {},\n        isAuthenticated: false,\n        isLoading: false,\n        error: null\n    },\n    reducers: {\n        loginRequest: (state) => {\n            state.isLoading = true;\n        },\n        loginSuccess: (state, { payload }) => {\n            state.token = payload.token;\n            state.user = payload.user;\n            state.isAuthenticated = true;\n            state.isLoading = false;\n        },\n        loginFailure: (state, { payload }) => {\n            state.error = payload;\n            state.isLoading = false;\n        }\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(login.pending, (state) => {\n                state.isLoading = true;\n            })\n            .addCase(login.fulfilled, (state, action) => {\n                state.token = action.payload.token;\n                state.user = action.payload.user;\n                state.isAuthenticated = true;\n                state.isLoading = false;\n            })\n            .addCase(login.rejected, (state, action) => {\n                state.error = action.payload as string;\n                state.isLoading = false;\n            });\n    }\n});\n\nexport const selectAuth = (state) => state.auth;\n\nexport default authSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,KAAK,GAAGF,gBAAgB,CAAC,YAAY,EAAE,MAAOG,OAAO,IAAK;EACnE,MAAM;IAACC,QAAQ;IAAEC;EAAQ,CAAC,GAAGF,OAAO;EACpC,IAAI;IACA,MAAMG,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,QAAQ,EAAE;MAAEH,QAAQ;MAAEC;IAAS,CAAC,CAAC;IACnEG,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAACI,IAAI,CAACC,KAAK,CAAC;IAClD,OAAOL,QAAQ,CAACI,IAAI;EACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZ,MAAMA,KAAK,CAACN,QAAQ,CAACI,IAAI,CAACE,KAAK;EACnC;AACJ,CAAC,CAAC;AAEF,MAAMC,SAAS,GAAGd,WAAW,CAAC;EAC1Be,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACVJ,KAAK,EAAE,EAAE;IACTK,IAAI,EAAE,CAAC,CAAC;IACRC,eAAe,EAAE,KAAK;IACtBC,SAAS,EAAE,KAAK;IAChBN,KAAK,EAAE;EACX,CAAC;EACDO,QAAQ,EAAE;IACNC,YAAY,EAAGC,KAAK,IAAK;MACrBA,KAAK,CAACH,SAAS,GAAG,IAAI;IAC1B,CAAC;IACDI,YAAY,EAAE,CAACD,KAAK,WAAkB;MAAA,IAAhB;QAAElB;MAAQ,CAAC;MAC7BkB,KAAK,CAACV,KAAK,GAAGR,OAAO,CAACQ,KAAK;MAC3BU,KAAK,CAACL,IAAI,GAAGb,OAAO,CAACa,IAAI;MACzBK,KAAK,CAACJ,eAAe,GAAG,IAAI;MAC5BI,KAAK,CAACH,SAAS,GAAG,KAAK;IAC3B,CAAC;IACDK,YAAY,EAAE,CAACF,KAAK,YAAkB;MAAA,IAAhB;QAAElB;MAAQ,CAAC;MAC7BkB,KAAK,CAACT,KAAK,GAAGT,OAAO;MACrBkB,KAAK,CAACH,SAAS,GAAG,KAAK;IAC3B;EACJ,CAAC;EACDM,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CACFC,OAAO,CAACxB,KAAK,CAACyB,OAAO,EAAGN,KAAK,IAAK;MAC/BA,KAAK,CAACH,SAAS,GAAG,IAAI;IAC1B,CAAC,CAAC,CACDQ,OAAO,CAACxB,KAAK,CAAC0B,SAAS,EAAE,CAACP,KAAK,EAAEQ,MAAM,KAAK;MACzCR,KAAK,CAACV,KAAK,GAAGkB,MAAM,CAAC1B,OAAO,CAACQ,KAAK;MAClCU,KAAK,CAACL,IAAI,GAAGa,MAAM,CAAC1B,OAAO,CAACa,IAAI;MAChCK,KAAK,CAACJ,eAAe,GAAG,IAAI;MAC5BI,KAAK,CAACH,SAAS,GAAG,KAAK;IAC3B,CAAC,CAAC,CACDQ,OAAO,CAACxB,KAAK,CAAC4B,QAAQ,EAAE,CAACT,KAAK,EAAEQ,MAAM,KAAK;MACxCR,KAAK,CAACT,KAAK,GAAGiB,MAAM,CAAC1B,OAAiB;MACtCkB,KAAK,CAACH,SAAS,GAAG,KAAK;IAC3B,CAAC,CAAC;EACV;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMa,UAAU,GAAIV,KAAK,IAAKA,KAAK,CAACW,IAAI;AAE/C,eAAenB,SAAS,CAACoB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}