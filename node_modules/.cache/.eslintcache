[{"/Users/hb/Desktop/Projects/gossip_frontend/src/index.tsx":"1","/Users/hb/Desktop/Projects/gossip_frontend/src/reportWebVitals.ts":"2","/Users/hb/Desktop/Projects/gossip_frontend/src/App.tsx":"3","/Users/hb/Desktop/Projects/gossip_frontend/src/store/index.ts":"4","/Users/hb/Desktop/Projects/gossip_frontend/src/components/LoadingSpinner.tsx":"5","/Users/hb/Desktop/Projects/gossip_frontend/src/services/postService.ts":"6","/Users/hb/Desktop/Projects/gossip_frontend/src/services/Api.ts":"7","/Users/hb/Desktop/Projects/gossip_frontend/src/hooks/redux-hooks.ts":"8","/Users/hb/Desktop/Projects/gossip_frontend/src/services/userService.ts":"9","/Users/hb/Desktop/Projects/gossip_frontend/src/components/MenuAppBar.tsx":"10","/Users/hb/Desktop/Projects/gossip_frontend/src/store/errors/errorSlice.ts":"11","/Users/hb/Desktop/Projects/gossip_frontend/src/store/posts/postSlice.ts":"12","/Users/hb/Desktop/Projects/gossip_frontend/src/store/users/userSlice.ts":"13","/Users/hb/Desktop/Projects/gossip_frontend/src/store/comments/commentSlice.ts":"14","/Users/hb/Desktop/Projects/gossip_frontend/src/pages/auth/Signup.tsx":"15","/Users/hb/Desktop/Projects/gossip_frontend/src/pages/auth/Home.tsx":"16","/Users/hb/Desktop/Projects/gossip_frontend/src/pages/auth/Login.tsx":"17","/Users/hb/Desktop/Projects/gossip_frontend/src/pages/users/User.tsx":"18","/Users/hb/Desktop/Projects/gossip_frontend/src/pages/users/UpdateUser.tsx":"19","/Users/hb/Desktop/Projects/gossip_frontend/src/store/users/user-actions.ts":"20","/Users/hb/Desktop/Projects/gossip_frontend/src/store/categories/categoriesSlice.ts":"21","/Users/hb/Desktop/Projects/gossip_frontend/src/components/ToggleSearchBar.tsx":"22","/Users/hb/Desktop/Projects/gossip_frontend/src/store/posts/post-actions.ts":"23","/Users/hb/Desktop/Projects/gossip_frontend/src/components/Posts.tsx":"24","/Users/hb/Desktop/Projects/gossip_frontend/src/components/Post.tsx":"25"},{"size":384,"mtime":1674595735112,"results":"26","hashOfConfig":"27"},{"size":425,"mtime":1674564866079,"results":"28","hashOfConfig":"27"},{"size":1792,"mtime":1674645344338,"results":"29","hashOfConfig":"27"},{"size":661,"mtime":1674641760676,"results":"30","hashOfConfig":"27"},{"size":230,"mtime":1674555476154,"results":"31","hashOfConfig":"27"},{"size":838,"mtime":1674640201373,"results":"32","hashOfConfig":"27"},{"size":205,"mtime":1674594228157,"results":"33","hashOfConfig":"27"},{"size":345,"mtime":1674555476185,"results":"34","hashOfConfig":"27"},{"size":971,"mtime":1674639939037,"results":"35","hashOfConfig":"27"},{"size":3058,"mtime":1674638811552,"results":"36","hashOfConfig":"27"},{"size":508,"mtime":1674638765169,"results":"37","hashOfConfig":"27"},{"size":878,"mtime":1674643153070,"results":"38","hashOfConfig":"27"},{"size":1134,"mtime":1674638811568,"results":"39","hashOfConfig":"27"},{"size":770,"mtime":1674640849870,"results":"40","hashOfConfig":"27"},{"size":2545,"mtime":1674638809378,"results":"41","hashOfConfig":"27"},{"size":534,"mtime":1674654230742,"results":"42","hashOfConfig":"27"},{"size":2663,"mtime":1674638809386,"results":"43","hashOfConfig":"27"},{"size":2120,"mtime":1674638809387,"results":"44","hashOfConfig":"27"},{"size":2421,"mtime":1674638809387,"results":"45","hashOfConfig":"27"},{"size":3593,"mtime":1674638811556,"results":"46","hashOfConfig":"27"},{"size":512,"mtime":1674643898125,"results":"47","hashOfConfig":"27"},{"size":1985,"mtime":1674653204161,"results":"48","hashOfConfig":"27"},{"size":2509,"mtime":1674640471080,"results":"49","hashOfConfig":"27"},{"size":1876,"mtime":1674654506364,"results":"50","hashOfConfig":"27"},{"size":0,"mtime":1674654264592,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1b4m237",{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"81"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"81"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"81"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"81"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"81"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"81"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"81"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/hb/Desktop/Projects/gossip_frontend/src/index.tsx",[],[],"/Users/hb/Desktop/Projects/gossip_frontend/src/reportWebVitals.ts",[],[],["137","138"],"/Users/hb/Desktop/Projects/gossip_frontend/src/App.tsx",[],[],"/Users/hb/Desktop/Projects/gossip_frontend/src/store/index.ts",[],[],"/Users/hb/Desktop/Projects/gossip_frontend/src/components/LoadingSpinner.tsx",[],[],"/Users/hb/Desktop/Projects/gossip_frontend/src/services/postService.ts",["139"],[],"/Users/hb/Desktop/Projects/gossip_frontend/src/services/Api.ts",["140"],[],"/Users/hb/Desktop/Projects/gossip_frontend/src/hooks/redux-hooks.ts",[],[],"/Users/hb/Desktop/Projects/gossip_frontend/src/services/userService.ts",["141"],[],"import Api from \"./Api\";\n\nexport default {\n  async getAllUsers() {\n    var response = await Api().get(\"/users\");\n    return response.data;\n  },\n  async getSelectedUser(id: number) {\n    var response = await Api().get(`/users/${id}`);\n    return response.data;\n  },\n  async createUser(username: string, password: string) {\n    var response = await Api().post(`/users`, { username, password });\n    return response.data;\n  },\n  async updateUser(id: number, username: string, password: string) {\n    var response = await Api().put(`/users/${id}`, { \"user\": { \"id\": id, \"username\": username, \"password\": password } });\n    return response.data;\n  },\n  async deleteUser(id: number) {\n    var response = await Api().delete(`/users/${id}`);\n    return response.data;\n  },\n  // login\n  async loginUser(username: string, password: string) {\n    var response = await Api().post(`/login`, { \"user\": { \"username\": username, \"password\": password } });\n    return response.data;\n  },\n}",["142","143"],"/Users/hb/Desktop/Projects/gossip_frontend/src/components/MenuAppBar.tsx",["144","145"],[],"import * as React from 'react';\nimport {\n  AppBar,\n  Box,\n  Toolbar,\n  IconButton,\n  Typography,\n  MenuItem,\n  Menu,\n  Button,\n} from \"@mui/material\";\nimport AccountCircle from \"@mui/icons-material/AccountCircle\";\nimport { Link } from \"react-router-dom\";\nimport { useNavigate } from 'react-router-dom';\nimport userSlice from '../store/users/userSlice';\nimport { useAppDispatch, useAppSelector } from '../hooks/redux-hooks';\nimport { logoutUser } from '../store/users/user-actions';\n\n// Useful for toggling sort\n{/* \n  const [auth, setAuth] = React.useState(true);\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setAuth(event.target.checked);\n  };\n<FormGroup>\n<FormControlLabel\n  control={\n    <Switch\n      checked={auth}\n      onChange={handleChange}\n      aria-label=\"login switch\"\n    />\n  }\n  label={auth ? 'Logout' : 'Login'}\n/>\n</FormGroup> */\n}\n\nexport default function MenuAppBar() {\n  const curr_user_id = useAppSelector(state => state.users.current_user.id);\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const isLoggedIn = curr_user_id !== 0 && localStorage.hasOwnProperty(\"token\");\n\n  const handleMenu = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n\n  const goToUserPage = () => {\n    handleClose();\n    navigate(`/user/${curr_user_id}`);\n  };\n\n  const logOut = () => {\n    dispatch(logoutUser());\n    handleClose();\n    navigate(\"/\");\n  };\n\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            Gossip On Rails\n          </Typography>\n          {isLoggedIn && (\n            <div>\n              <IconButton\n                size=\"large\"\n                aria-label=\"account of current user\"\n                aria-controls=\"menu-appbar\"\n                aria-haspopup=\"true\"\n                onClick={handleMenu}\n                color=\"inherit\"\n              >\n                <AccountCircle />\n              </IconButton>\n              <Menu\n                id=\"menu-appbar\"\n                anchorEl={anchorEl}\n                anchorOrigin={{\n                  vertical: 'top',\n                  horizontal: 'right',\n                }}\n                keepMounted\n                transformOrigin={{\n                  vertical: 'top',\n                  horizontal: 'right',\n                }}\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n              >\n                <MenuItem onClick={goToUserPage}>My Account</MenuItem>\n                <MenuItem onClick={logOut}>Logout</MenuItem>\n              </Menu>\n            </div>\n          )}\n          {!isLoggedIn && (\n            <Link to='/login'>\n              <Button color=\"inherit\" sx={{ flexGrow: 0 }}>Login</Button>\n            </Link>\n          )}\n        </Toolbar>\n      </AppBar>\n    </Box>\n  );\n}","/Users/hb/Desktop/Projects/gossip_frontend/src/store/errors/errorSlice.ts",[],[],"/Users/hb/Desktop/Projects/gossip_frontend/src/store/posts/postSlice.ts",[],[],"/Users/hb/Desktop/Projects/gossip_frontend/src/store/users/userSlice.ts",["146"],[],"import { UserModel, UserArrayModel } from \"../../models/redux-model\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport userService from \"../../services/userService\";\n\nconst initialUserState:UserArrayModel = {\n  all_users: [],\n  selected_user: {\n    \"id\": 0,\n    \"username\": \"\",\n    \"created_at\": new Date(\"2023-01-25\"),\n  },\n  current_user: {\n    \"id\": 0,\n    \"username\": \"\",\n    \"created_at\": new Date(\"2023-01-25\"),\n  },\n  isLoading: false,\n  \n}\n\nconst userSlice = createSlice({\n  name: \"users\",\n  initialState: initialUserState,\n  reducers: {\n    setUsers(state, action: PayloadAction<UserModel[]>) {\n      state.all_users = action.payload;\n    }, \n    setSelectedUser(state, action: PayloadAction<UserModel>) {\n      state.selected_user = action.payload;\n    },\n    setIsLoading(state, action: PayloadAction<boolean>) {\n      state.isLoading = action.payload;\n    },\n    setCurrentUser(state, action: PayloadAction<UserModel>) {\n      state.current_user = action.payload;\n    },\n    clearCurrentUser(state) {\n      state.current_user = initialUserState.current_user;\n    },\n  },\n});\n\nexport default userSlice;","/Users/hb/Desktop/Projects/gossip_frontend/src/store/comments/commentSlice.ts",[],[],"/Users/hb/Desktop/Projects/gossip_frontend/src/pages/auth/Signup.tsx",["147","148","149","150","151","152"],[],"import React, { useEffect, useState } from 'react';\nimport { Navigate, useNavigate } from 'react-router-dom';\nimport { TextField, Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box, Paper, Typography } from '@material-ui/core';\nimport { useAppDispatch, useAppSelector } from '../../hooks/redux-hooks';\nimport { createUser } from '../../store/users/user-actions';\nimport LoadingSpinner from '../../components/LoadingSpinner';\nimport Grid from '@material-ui/core/Grid';\n\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  button: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst Signup: React.FC = () => {\n  const classes = useStyles();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const auth = useAppSelector(state => state.users.current_user.id != 0);\n  const isLoggedIn = auth && localStorage.hasOwnProperty(\"token\");\n\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      navigate('/');\n    }\n  }, [isLoading, error, navigate]);\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    dispatch(createUser(username, password));\n    if (localStorage.hasOwnProperty(\"token\")) {\n      navigate('/');\n    }\n  };\n\n  return (\n    <Grid container justifyContent=\"center\" alignItems=\"center\" style={{ minHeight: '100vh' }}>\n      <Paper elevation={3} style={{ padding: '20px' }}>\n        <form className={classes.form} onSubmit={handleSubmit}>\n          <h2>Sign Up</h2>\n          <TextField\n            id=\"username\"\n            label=\"Username\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n          />\n          <br />\n          <TextField\n            id=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <br />\n          {isLoading && (<LoadingSpinner />)}\n          {error && (\n            <Typography variant=\"body2\" color=\"error\">\n              {error}\n            </Typography>\n          )}\n          <Button variant=\"contained\" color=\"primary\" type=\"submit\" className={classes.button}>\n            Sign Up\n          </Button>\n        </form>\n      </Paper>\n    </Grid>  \n  );\n};\n\nexport default Signup;\n\n","/Users/hb/Desktop/Projects/gossip_frontend/src/pages/auth/Home.tsx",[],[],"/Users/hb/Desktop/Projects/gossip_frontend/src/pages/auth/Login.tsx",["153","154","155","156"],[],"import React, { useEffect, useState } from 'react';\nimport { Link, Navigate, useNavigate } from 'react-router-dom';\nimport { TextField, Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box, Paper, Typography } from '@material-ui/core';\nimport { useAppDispatch, useAppSelector } from '../../hooks/redux-hooks';\nimport { loginUser } from '../../store/users/user-actions';\nimport LoadingSpinner from '../../components/LoadingSpinner';\nimport Grid from '@material-ui/core/Grid';\n\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  button: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst Login: React.FC = () => {\n  const classes = useStyles();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const isLoading = useAppSelector(state => state.users.isLoading);\n  const error = useAppSelector(state => state.errors.error);\n  const auth = useAppSelector(state => state.users.current_user.id != 0);\n  const isLoggedIn = auth && localStorage.hasOwnProperty(\"token\");\n\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      navigate('/');\n    }\n  }, [isLoading, error, navigate]);\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    dispatch(loginUser(username, password));\n    if (localStorage.hasOwnProperty(\"token\")) {\n      navigate('/');\n    }\n  };\n\n  return (\n    <Grid container justifyContent=\"center\" alignItems=\"center\" style={{ minHeight: '100vh' }}>\n      <Paper elevation={3} style={{ padding: '20px' }}>\n        <form className={classes.form} onSubmit={handleSubmit}>\n          <h2>Login</h2>\n          <TextField\n            id=\"username\"\n            label=\"Username\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n          />\n          <br />\n          <TextField\n            id=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <br />\n          <Link to={`/signup`}>\n            <Button>Sign Up</Button>\n          </Link>\n          {isLoading && (<LoadingSpinner />)}\n          {error && (\n            <Typography variant=\"body2\" color=\"error\">\n              {error}\n            </Typography>\n          )}\n          <Button variant=\"contained\" color=\"primary\" type=\"submit\" className={classes.button}>\n            Login\n          </Button>\n        </form>\n      </Paper>\n    </Grid>  \n  );\n};\n\nexport default Login;\n","/Users/hb/Desktop/Projects/gossip_frontend/src/pages/users/User.tsx",["157","158"],[],"import React, { useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { useAppSelector, useAppDispatch } from '../../hooks/redux-hooks';\nimport { fetchSelectedUser, deleteUser } from '../../store/users/user-actions';\nimport { Navigate, useNavigate } from 'react-router-dom';\nimport {\n  Grid,\n  Typography,\n  Paper,\n  Button,\n  makeStyles\n} from '@material-ui/core';\nimport { AccountCircle } from '@material-ui/icons';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: theme.spacing(2),\n  },\n  icon: {\n    fontSize: '6rem',\n    marginRight: theme.spacing(2),\n  },\n  text: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n}));\n\nconst User: React.FC = () => {\n  const classes = useStyles();\n  const { user_id } = useParams();\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const user = useAppSelector(state => state.users.selected_user);\n  const current_user_id = useAppSelector(state => state.users.current_user.id);\n\n  useEffect(() => {\n    dispatch(fetchSelectedUser(parseInt(user_id as string)));\n  }, [dispatch, user_id]);\n\n  const handleDelete = () => {\n    dispatch(deleteUser(parseInt(user_id as string)));\n    navigate(\"/\");\n  };\n\n  return (\n    <Paper>\n      <Grid container className={classes.root}>\n        <AccountCircle className={classes.icon} />\n        <div className={classes.text}>\n          <Typography variant=\"h4\">{user.username}</Typography>\n          <Typography variant=\"body2\">created at {user.created_at.toISOString}</Typography>\n          {\n            user.id == current_user_id &&\n            <>\n              <Button variant=\"contained\" color=\"secondary\" onClick={handleDelete}>\n                Delete User\n              </Button>\n              <Link to={`/users/${current_user_id}/update`}>\n                <Button variant=\"contained\" color=\"primary\">\n                  Update User\n                </Button>\n              </Link>\n            </>\n          }\n        </div>\n      </Grid>\n    </Paper>\n  );\n\n};\n\nexport default User;","/Users/hb/Desktop/Projects/gossip_frontend/src/pages/users/UpdateUser.tsx",["159","160","161","162"],[],"import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useAppSelector, useAppDispatch } from '../../hooks/redux-hooks';\nimport { updateUser } from '../../store/users/user-actions';\nimport { TextField, Button } from '@material-ui/core';\nimport {\n  Typography,\n  Paper,\n  makeStyles\n} from '@material-ui/core';\nimport { Navigate, useNavigate } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  button: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst UpdateUser: React.FC = () => {\n  const classes = useStyles();\n  const { user_id } = useParams();\n  const current_user = useAppSelector(state => state.users.current_user);\n  const [username, setUsername] = useState(current_user.username);\n  const [password, setPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const isRightUser = current_user.id == parseInt(user_id as string);\n\n  useEffect(() => {\n    if (!isRightUser) {\n      navigate('/');\n    }\n  }, [isLoading, error, navigate]);\n  \n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    dispatch(updateUser(parseInt(user_id as string), username, password));\n    if (!error) {\n      navigate(`/users/${user_id}`);\n    }\n  }\n\n  return !isRightUser ? <Navigate to=\"/\" /> :(\n    <div>\n      <Paper elevation={3} style={{ padding: '20px' }}>\n        <form className={classes.form} onSubmit={handleSubmit}>\n          <h2>Login</h2>\n          <TextField\n            id=\"username\"\n            label=\"Username\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n          />\n          <br />\n          <TextField\n            id=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <br />\n          {error && (\n            <Typography variant=\"body2\" color=\"error\">\n              {error}\n            </Typography>\n          )}\n          <Button variant=\"contained\" color=\"primary\" type=\"submit\" className={classes.button}>\n            Login\n          </Button>\n        </form>\n      </Paper>\n    </div>\n\n  );\n};\n\nexport default UpdateUser;","/Users/hb/Desktop/Projects/gossip_frontend/src/store/users/user-actions.ts",["163"],[],"import userSlice from \"./userSlice\";\nimport { AnyAction } from \"@reduxjs/toolkit\";\nimport { ThunkAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../index\";\nimport { AuthModel, ErrorModel, UserModel } from \"../../models/redux-model\";\nimport userService from \"../../services/userService\";\nimport { useNavigate } from \"react-router-dom\";\nimport errorSlice from \"../errors/errorSlice\";\n\nexport const userActions = userSlice.actions;\nexport const errorActions = errorSlice.actions;\n\n// index\nexport const fetchUsers = (): ThunkAction<void, RootState, unknown, AnyAction> => {\n  return async (dispatch,getState) => {\n    const response: UserModel[] = await userService.getAllUsers();\n    dispatch(userActions.setUsers(response));\n  };\n}\n\n// show\nexport const fetchSelectedUser = (user_id:number): ThunkAction<void, RootState, unknown, AnyAction> => { \n  return async (dispatch,getState) => {\n    const response: UserModel = await userService.getSelectedUser(user_id);\n    dispatch(userActions.setSelectedUser(response));\n  };\n}\n\n// create/sign up\nexport const createUser = (username: string, password:string): ThunkAction<void, RootState, unknown, AnyAction> => { \n  return async (dispatch,getState) => {\n    dispatch(userActions.setIsLoading(true));\n    const response: AuthModel | ErrorModel = await userService.createUser(username, password);\n    if (\"error\" in response) {\n      dispatch(userActions.setIsLoading(false));\n      dispatch(errorActions.setError(response.error));\n    } else { \n      dispatch(userActions.setCurrentUser(response.user));\n      localStorage.setItem(\"token\", response.token);\n      dispatch(userActions.setIsLoading(false));\n      dispatch(errorActions.clearError());\n    }\n  };\n}\n\n// update\nexport const updateUser = (user_id: number, username: string, password:string): ThunkAction<void, RootState, unknown, AnyAction> => {\n  return async (dispatch,getState) => {\n    const response: UserModel | ErrorModel = await userService.updateUser(user_id, username, password);\n    if (\"error\" in response) {\n      dispatch(errorActions.setError(response.error));\n    } else { \n      dispatch(errorActions.clearError());\n      dispatch(userActions.setSelectedUser(response));\n    }\n  };\n}\n\n// delete\nexport const deleteUser = (user_id:number): ThunkAction<void, RootState, unknown, AnyAction> => {\n  return async (dispatch,getState) => {\n    const response: UserModel[] | ErrorModel = await userService.deleteUser(user_id);\n    if (\"error\" in response) {\n      dispatch(errorActions.setError(response.error));\n    } else { \n      dispatch(errorActions.clearError());\n      dispatch(userActions.setUsers(response));\n      localStorage.removeItem(\"token\");\n    }\n  };\n}\n\n// login\nexport const loginUser = (username:string, password:string): ThunkAction<void, RootState, unknown, AnyAction> => {\n  return async (dispatch,getState) => {\n    dispatch(userActions.setIsLoading(true));\n    const response: AuthModel | ErrorModel = await userService.loginUser(username, password);\n    if (\"error\" in response) {\n      dispatch(userActions.setIsLoading(false));\n      dispatch(errorActions.setError(response.error));\n    } else {\n      dispatch(userActions.setCurrentUser(response.user));\n      localStorage.setItem(\"token\", response.token);\n      dispatch(userActions.setIsLoading(false));\n      dispatch(errorActions.clearError());\n    }\n  };\n}\n\n// logout\nexport const logoutUser = (): ThunkAction<void, RootState, unknown, AnyAction> => {\n  return async (dispatch,getState) => {\n    localStorage.removeItem(\"token\");\n    dispatch(userActions.clearCurrentUser());\n  };\n}","/Users/hb/Desktop/Projects/gossip_frontend/src/store/categories/categoriesSlice.ts",[],[],"/Users/hb/Desktop/Projects/gossip_frontend/src/components/ToggleSearchBar.tsx",["164"],[],"/Users/hb/Desktop/Projects/gossip_frontend/src/store/posts/post-actions.ts",[],[],"/Users/hb/Desktop/Projects/gossip_frontend/src/components/Posts.tsx",["165"],[],"/Users/hb/Desktop/Projects/gossip_frontend/src/components/Post.tsx",[],[],{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":3,"column":1,"nodeType":"172","endLine":24,"endColumn":2},{"ruleId":"170","severity":1,"message":"173","line":3,"column":1,"nodeType":"172","endLine":10,"endColumn":3},{"ruleId":"170","severity":1,"message":"171","line":3,"column":1,"nodeType":"172","endLine":29,"endColumn":2},{"ruleId":"166","replacedBy":"174"},{"ruleId":"168","replacedBy":"175"},{"ruleId":"176","severity":1,"message":"177","line":15,"column":8,"nodeType":"178","messageId":"179","endLine":15,"endColumn":17},{"ruleId":"180","severity":1,"message":"181","line":20,"column":1,"nodeType":"182","messageId":"183","endLine":37,"endColumn":2},{"ruleId":"176","severity":1,"message":"184","line":3,"column":8,"nodeType":"178","messageId":"179","endLine":3,"endColumn":19},{"ruleId":"176","severity":1,"message":"185","line":2,"column":10,"nodeType":"178","messageId":"179","endLine":2,"endColumn":18},{"ruleId":"176","severity":1,"message":"186","line":5,"column":10,"nodeType":"178","messageId":"179","endLine":5,"endColumn":13},{"ruleId":"176","severity":1,"message":"187","line":27,"column":21,"nodeType":"178","messageId":"179","endLine":27,"endColumn":33},{"ruleId":"176","severity":1,"message":"188","line":28,"column":17,"nodeType":"178","messageId":"179","endLine":28,"endColumn":25},{"ruleId":"189","severity":1,"message":"190","line":29,"column":68,"nodeType":"191","messageId":"192","endLine":29,"endColumn":70},{"ruleId":"193","severity":1,"message":"194","line":39,"column":6,"nodeType":"195","endLine":39,"endColumn":34,"suggestions":"196"},{"ruleId":"176","severity":1,"message":"185","line":2,"column":16,"nodeType":"178","messageId":"179","endLine":2,"endColumn":24},{"ruleId":"176","severity":1,"message":"186","line":5,"column":10,"nodeType":"178","messageId":"179","endLine":5,"endColumn":13},{"ruleId":"189","severity":1,"message":"190","line":29,"column":68,"nodeType":"191","messageId":"192","endLine":29,"endColumn":70},{"ruleId":"193","severity":1,"message":"194","line":39,"column":6,"nodeType":"195","endLine":39,"endColumn":34,"suggestions":"197"},{"ruleId":"176","severity":1,"message":"185","line":5,"column":10,"nodeType":"178","messageId":"179","endLine":5,"endColumn":18},{"ruleId":"189","severity":1,"message":"198","line":59,"column":21,"nodeType":"191","messageId":"192","endLine":59,"endColumn":23},{"ruleId":"176","severity":1,"message":"187","line":30,"column":21,"nodeType":"178","messageId":"179","endLine":30,"endColumn":33},{"ruleId":"176","severity":1,"message":"188","line":31,"column":17,"nodeType":"178","messageId":"179","endLine":31,"endColumn":25},{"ruleId":"189","severity":1,"message":"198","line":34,"column":39,"nodeType":"191","messageId":"192","endLine":34,"endColumn":41},{"ruleId":"193","severity":1,"message":"199","line":40,"column":6,"nodeType":"195","endLine":40,"endColumn":34,"suggestions":"200"},{"ruleId":"176","severity":1,"message":"201","line":7,"column":10,"nodeType":"178","messageId":"179","endLine":7,"endColumn":21},{"ruleId":"176","severity":1,"message":"202","line":24,"column":7,"nodeType":"178","messageId":"179","endLine":24,"endColumn":33},{"ruleId":null,"fatal":true,"severity":2,"message":"203","line":60,"column":4},"no-native-reassign",["204"],"no-negated-in-lhs",["205"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","Assign arrow function to a variable before exporting as module default",["204"],["205"],"@typescript-eslint/no-unused-vars","'userSlice' is defined but never used.","Identifier","unusedVar","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'userService' is defined but never used.","'Navigate' is defined but never used.","'Box' is defined but never used.","'setIsLoading' is assigned a value but never used.","'setError' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isLoggedIn'. Either include it or remove the dependency array.","ArrayExpression",["206"],["207"],"Expected '===' and instead saw '=='.","React Hook useEffect has a missing dependency: 'isRightUser'. Either include it or remove the dependency array.",["208"],"'useNavigate' is defined but never used.","'filteredPosts' is defined but never used.","Parsing error: ')' expected.","no-global-assign","no-unsafe-negation",{"desc":"209","fix":"210"},{"desc":"209","fix":"211"},{"desc":"212","fix":"213"},"Update the dependencies array to be: [isLoading, error, navigate, isLoggedIn]",{"range":"214","text":"215"},{"range":"216","text":"215"},"Update the dependencies array to be: [isLoading, error, navigate, isRightUser]",{"range":"217","text":"218"},[1233,1261],"[isLoading, error, navigate, isLoggedIn]",[1271,1299],[1193,1221],"[isLoading, error, navigate, isRightUser]"]